---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by garyxunchen.
--- DateTime: 2023/8/10 14:54
---

print("******************Lua调用C#类相关知识点************************")

--lua中使用C#的类非常简单
--固定套路
--CS.命名空间.类名
--Unity的类 比如 GameObject Transform 等  --CS.UnityEngine.类名
--CS.UnityEngine.GameObject

--通过C#中的类 实例化一个对象 lua中没有new 所以我们直接 类名括号 就是实例化对象
local obj1 = CS.UnityEngine.GameObject();
local obj2 = CS.UnityEngine.GameObject("Gary")

--优化 为了方便使用 并且节约性能 定义全局变量 存储C#中的类
GameObject = CS.UnityEngine.GameObject
local obj3 = GameObject("Gary222")

--类中的静态对象 可以直接使用.来调用
local obj4 = GameObject.Find("Gary222");

--得到对象中的成员变量 直接对象.即可
Debug = CS.UnityEngine.Debug;
Debug.Log(obj4.transform.position)
print(obj4.transform.position)

--如果使用对象中的 成员方法！！！！ 一定要加冒号：
Vector3 = CS.UnityEngine.Vector3;

obj4.transform:Translate(Vector3.right);
Debug.Log(obj4.transform.position);

--自定义类 使用方法相同 只是命名空间不同而已
local t = CS.Test()
t:Speak("test说话")
local t2 = CS.GaryXunChen.Test2()
t2:Speak("test说话")

--继承了MonoBehaviour的类
--继承了MonoBehaviour的类，是不能直接new的
local obj5 = GameObject("加脚本测试");
--通过GameObject的AddComponent添加脚本
--Xlua不支持无参泛型函数，需要用另一个重载
--Xlua提供了一个重要方法 typeof 可以得到类的Type
obj5:AddComponent(typeof(CS.LuaCallCSharp))